//DEF_INSTR(Name, Values_array)

//-----------------------------------------------

// two nops '0x90'

DEF_INSTR(1, Two_nops, 0x90, 0x90 )

//-----------------------------------------------

// push rax 

DEF_INSTR(2, Push_rax, 0x50 )

//-----------------------------------------------

// pop rax 

DEF_INSTR(3, Pop_rax, 0x58 )

//-----------------------------------------------

// push rbx, rbp, r12, r13, r14, r15

DEF_INSTR(4, Save_regs, 0x53, \
                        0x55, \
                        0x41, 0x54, \
                        0x41, 0x55, \
                        0x41, 0x56, \
                        0x41, 0x57 )

//-----------------------------------------------

// pop r15, r14, r13, r12, rbp, rbx

DEF_INSTR(5, Restore_regs, 0x41, 0x5F, \
                           0x41, 0x5E, \
                           0x41, 0x5D, \
                           0x41, 0x5C, \
                           0x5D, \
                           0x5B )

//-----------------------------------------------

// ret '0xC3' 

DEF_INSTR(6, Return, 0xC3 )

//-----------------------------------------------

// HLT 'analogue'

// xor rdi, rdi
// mov rax, 3Ch
// syscall

DEF_INSTR(7, Exit, 0x48, 0x31, 0xFF, \
                   0xB8, 0x3C, 0x00, 0x00, 0x00, \
                   0x0F, 0x05 )

//-----------------------------------------------

// Get first argument from stack to xmm15
// movss xmm15, dword [rsp + 8]

DEF_INSTR(8, Movss_xmm15_dword_rsp_plus_8, 0xF3, 0x44, 0x0F, 0x10, 0x7C, 0x24, 0x08 )

//-----------------------------------------------

// Get first argument from stack + 8 to xmm0
// movss xmm0, dword [rsp + 8]

DEF_INSTR(9, Movss_xmm0_dword_rsp_plus_8, 0xF3, 0x0F, 0x10, 0x44, 0x24, 0x08)

//-----------------------------------------------

// Get top value from stack in xmm0 for comapring 
// movss xmm0, dword [rsp]

DEF_INSTR(10, Movss_xmm0_dword_rsp, 0xF3, 0x0F, 0x10, 0x04, 0x24)

//-----------------------------------------------

// Get second argument from stack to xmm1
// movss xmm1, dword [rsp]

DEF_INSTR(11, Movss_xmm1_dword_rsp, 0xF3, 0x0F, 0x10, 0x0C, 0x24)

//-----------------------------------------------

// subss xmm0, dword[rsp]

DEF_INSTR(12, Subss_xmm0_dword_rsp, 0xF3, 0x0F, 0x5C, 0x04, 0x24)

//-----------------------------------------------

// Add with second arg from stack
// addss xmm15, dword [rsp]

DEF_INSTR(13, Addss_xmm15_dword_rsp, 0xF3, 0x44, 0x0F, 0x58, 0x3C, 0x24 )

//-----------------------------------------------

// Sub with second arg from stack
// subss xmm15, dword [rsp]

DEF_INSTR(14, Subss_xmm15_dword_rsp, 0xF3, 0x44, 0x0F, 0x5C, 0x3C, 0x24 )

//-----------------------------------------------

// Mul with second arg from stack
// mulss xmm15, dword [rsp]

DEF_INSTR(15, Mulss_xmm15_dword_rsp, 0xF3, 0x44, 0x0F, 0x59, 0x3C, 0x24 )

//-----------------------------------------------

// Div with second arg from stack
// divss xmm15, dword [rsp]

DEF_INSTR(16, Divss_xmm15_dword_rsp, 0xF3, 0x44, 0x0F, 0x5E, 0x3C, 0x24 )

//-----------------------------------------------

// Save xmm15 dword value in r15d
// movd r15d, xmm15

DEF_INSTR(17, Movd_r15d_xmm15, 0x66, 0x45, 0x0F, 0x7E, 0xFF)

//-----------------------------------------------

// Restore xmm15 dword value from r15d
// movd xmm15, r15d

DEF_INSTR(18, Movd_xmm15_r15d, 0x66, 0x45, 0x0F, 0x6E, 0xFF)

//-----------------------------------------------

// add rsp, 8

DEF_INSTR(19, Add_rsp_8, 0x48, 0x83, 0xC4, 0x08 )

//-----------------------------------------------

// add rsp, 16

DEF_INSTR(20, Add_rsp_16, 0x48, 0x83, 0xC4, 0x10 )

//-----------------------------------------------

// sub rsp, 8

DEF_INSTR(21, Sub_rsp_8, 0x48, 0x83, 0xEC, 0x08 )

//-----------------------------------------------

// sub rsp, 16

DEF_INSTR(22, Sub_rsp_16, 0x48, 0x83, 0xEC, 0x10 )

//-----------------------------------------------

// push dword xmm0 to stack

// sub rsp, 8
// movss dword[rsp], xmm0

DEF_INSTR(23, Push_dword_xmm0, 0x48, 0x83, 0xEC, 0x08, \
                               0xF3, 0x0F, 0x11, 0x04, 0x24 )

//-----------------------------------------------

// Mov dword xmm15 to [rsp]

// movss dword[rsp], xmm15

DEF_INSTR(24, Movss_dword_rsp_xmm15, 0xF3, 0x44, 0x0F, 0x11, 0x3C, 0x24 )

//-----------------------------------------------

// pop dword from stack to xmm0

// movss xmm0, dword [rsp]
// add rsp, 8

DEF_INSTR(25, Pop_dword_xmm0, 0xF3, 0x0F, 0x10, 0x04, 0x24, \
                              0x48, 0x83, 0xC4, 0x08 )

//-----------------------------------------------

// Mov to xmm1 from data memory address
// WARNING: this instruction must be parched with address

// movss xmm1, [0]

DEF_INSTR(26, Mov_xmm1_mem, 0xF3, 0x0F, 0x10, 0x0C, 0x25, \
                            0x00, 0x00, 0x00, 0x00)

//-----------------------------------------------

// Mov to xmm13 from data memory address
// WARNING: this instruction must be parched with address

// movss xmm13, [0]

DEF_INSTR(27, Mov_xmm13_mem, 0xF3, 0x44, 0x0F, 0x10, 0x2C, 0x25,
                             0x00, 0x00, 0x00, 0x00)

//-----------------------------------------------

// Compare xmm0, xmm1
// comiss xmm0, xmm1

DEF_INSTR(28, Comiss_xmm0_xmm1, 0x0F, 0x2F, 0xC1 )

//-----------------------------------------------

// Compare xmm0 with second arg dword [rsp + 8]
// comiss xmm0, dword [rsp + 8]

DEF_INSTR(29, Comiss_xmm0_dword_rsp_plus_8, 0x0F, 0x2F, 0x44, 0x24, 0x08)

//-----------------------------------------------

// Conditional (short) jump 'jbe' N bytes ahead from this instruction
// jbe $ + N (short)

// WARNING: Instruction must be patched

DEF_INSTR(30, Jbe_short_ahead_N, 0x76, 0x00 )

//-----------------------------------------------

// Conditional (near) jump 'jbe' N bytes ahead from this instruction
// jbe $ + N (short)

// WARNING: Instruction must be patched

DEF_INSTR(31, Jbe_near_ahead_N, 0x0F, 0x86, \
                                0x00, 0x00, 0x00, 0x00 )

//-----------------------------------------------

// Conditional (short) jump 'jb' N bytes ahead from this instruction
// jb $ + N

// WARNING: Instruction must be patched

DEF_INSTR(32, Jb_short_ahead_N, 0x72, 0x00 )

//-----------------------------------------------

// Conditional (near) jump 'jb' N bytes ahead from this instruction
// jb $ + N

// WARNING: Instruction must be patched

DEF_INSTR(33, Jb_near_ahead_N, 0x0F, 0x82, \
                               0x00, 0x00, 0x00, 0x00 )

//-----------------------------------------------

// Conditional (short) jump 'ja' N bytes ahead from this instruction
// ja $ + N

// WARNING: Instruction must be patched

DEF_INSTR(34, Ja_short_ahead_N, 0x77, 0x00 )

//-----------------------------------------------

// Conditional (near) jump 'ja' N bytes ahead from this instruction
// ja $ + N

// WARNING: Instruction must be patched

DEF_INSTR(35, Ja_near_ahead_N, 0x0F, 0x87, \
                               0x00, 0x00, 0x00, 0x00 )

//-----------------------------------------------

// Conditional (short) jump 'jae' N bytes ahead from this instruction
// jae $ + N

// WARNING: Instruction must be patched

DEF_INSTR(36, Jae_short_ahead_N, 0x73, 0x00 )

//-----------------------------------------------

// Conditional (near) jump 'jae' N bytes ahead from this instruction
// jae $ + N

// WARNING: Instruction must be patched

DEF_INSTR(37, Jae_near_ahead_N, 0x0F, 0x83, \
                                0x00, 0x00, 0x00, 0x00 )

//-----------------------------------------------

// Null xmm's

// pxor xmm(i), xmm(i) ; 0 <= i <=15 

DEF_INSTR(38, Null_xmms, 0x66, 0x0F, 0xEF, 0xC0, \
                         0x66, 0x0F, 0xEF, 0xC9, \
                         0x66, 0x0F, 0xEF, 0xD2, \
                         0x66, 0x0F, 0xEF, 0xDB, \
                         0x66, 0x0F, 0xEF, 0xE4, \
                         0x66, 0x0F, 0xEF, 0xED, \
                         0x66, 0x0F, 0xEF, 0xF6, \
                         0x66, 0x0F, 0xEF, 0xFF, \
                         0x66, 0x45, 0x0F, 0xEF, 0xC0, \
                         0x66, 0x45, 0x0F, 0xEF, 0xC9, \
                         0x66, 0x45, 0x0F, 0xEF, 0xD2, \
                         0x66, 0x45, 0x0F, 0xEF, 0xDB, \
                         0x66, 0x45, 0x0F, 0xEF, 0xE4, \
                         0x66, 0x45, 0x0F, 0xEF, 0xED, \
                         0x66, 0x45, 0x0F, 0xEF, 0xF6, \
                         0x66, 0x45, 0x0F, 0xEF, 0xFF  ) 
    
//-----------------------------------------------

// Null xmm13

// pxor xmm13, xmm13 

DEF_INSTR(39, Null_xmm13, 0x66, 0x45, 0x0F, 0xEF, 0xED )

//-----------------------------------------------

// Push xmm0 - xmm7

// sub rsp 64
//movss dword [rsp + 0 ], xmm0
//movss dword [rsp + 8 ], xmm1
//movss dword [rsp + 16], xmm2
//movss dword [rsp + 24], xmm3
//movss dword [rsp + 32], xmm4
//movss dword [rsp + 40], xmm5
//movss dword [rsp + 48], xmm6
//movss dword [rsp + 56], xmm7

DEF_INSTR(40, Push_parameter_xmms, 0x48, 0x83, 0xEC, 0x40, \
                                   0xF3, 0x0F, 0x11, 0x04, 0x24, \
                                   0xF3, 0x0F, 0x11, 0x4C, 0x24, 0x08, \
                                   0xF3, 0x0F, 0x11, 0x54, 0x24, 0x10, \
                                   0xF3, 0x0F, 0x11, 0x5C, 0x24, 0x18, \
                                   0xF3, 0x0F, 0x11, 0x64, 0x24, 0x20, \
                                   0xF3, 0x0F, 0x11, 0x6C, 0x24, 0x28, \
                                   0xF3, 0x0F, 0x11, 0x74, 0x24, 0x30, \
                                   0xF3, 0x0F, 0x11, 0x7C, 0x24, 0x38  )  

//-----------------------------------------------

// Pop xmm1 - xmm7

//movss xmm1, dword [rsp + 0 ]
//movss xmm2, dword [rsp + 8 ]
//movss xmm3, dword [rsp + 16]
//movss xmm4, dword [rsp + 24]
//movss xmm5, dword [rsp + 32]
//movss xmm6, dword [rsp + 40]
//movss xmm7, dword [rsp + 48]

//add rsp, 56

DEF_INSTR(41, Pop_xmms_1_7, 0xF3, 0x0F, 0x10, 0x0C, 0x24, \
                            0xF3, 0x0F, 0x10, 0x54, 0x24, 0x08, \
                            0xF3, 0x0F, 0x10, 0x5C, 0x24, 0x10, \
                            0xF3, 0x0F, 0x10, 0x64, 0x24, 0x18, \
                            0xF3, 0x0F, 0x10, 0x6C, 0x24, 0x20, \
                            0xF3, 0x0F, 0x10, 0x74, 0x24, 0x28, \
                            0xF3, 0x0F, 0x10, 0x7C, 0x24, 0x30, \
                            0x48, 0x83, 0xC4, 0x38 )

//-----------------------------------------------

// Push xmm1 - xmm7

// sub rsp, 56
//movss dword [rsp + 0 ], xmm1
//movss dword [rsp + 8 ], xmm2
//movss dword [rsp + 16], xmm3
//movss dword [rsp + 24], xmm4
//movss dword [rsp + 32], xmm5
//movss dword [rsp + 40], xmm6
//movss dword [rsp + 48], xmm7

DEF_INSTR(42, Push_xmms_1_7, 0x48, 0x83, 0xEC, 0x38, \
                             0xF3, 0x0F, 0x11, 0x0C, 0x24, \
                             0xF3, 0x0F, 0x11, 0x54, 0x24, 0x08, \
                             0xF3, 0x0F, 0x11, 0x5C, 0x24, 0x10, \
                             0xF3, 0x0F, 0x11, 0x64, 0x24, 0x18, \
                             0xF3, 0x0F, 0x11, 0x6C, 0x24, 0x20, \
                             0xF3, 0x0F, 0x11, 0x74, 0x24, 0x28, \
                             0xF3, 0x0F, 0x11, 0x7C, 0x24, 0x30  )  

//-----------------------------------------------

// Pop xmm0 - xmm7

//movss xmm0, dword [rsp + 0 ]
//movss xmm1, dword [rsp + 8 ]
//movss xmm2, dword [rsp + 16]
//movss xmm3, dword [rsp + 24]
//movss xmm4, dword [rsp + 32]
//movss xmm5, dword [rsp + 40]
//movss xmm6, dword [rsp + 48]
//movss xmm7, dword [rsp + 54]

//add rsp, 64

DEF_INSTR(43, Pop_parameter_xmms, 0xF3, 0x0F, 0x10, 0x04, 0x24, \
                                  0xF3, 0x0F, 0x10, 0x4C, 0x24, 0x08, \
                                  0xF3, 0x0F, 0x10, 0x54, 0x24, 0x10, \
                                  0xF3, 0x0F, 0x10, 0x5C, 0x24, 0x18, \
                                  0xF3, 0x0F, 0x10, 0x64, 0x24, 0x20, \
                                  0xF3, 0x0F, 0x10, 0x6C, 0x24, 0x28, \
                                  0xF3, 0x0F, 0x10, 0x74, 0x24, 0x30, \
                                  0xF3, 0x0F, 0x10, 0x7C, 0x24, 0x38,
                                  0x48, 0x83, 0xC4, 0x40 )

//-----------------------------------------------

// movd r15d, xmm0

DEF_INSTR(44, Movd_r15d_xmm0, 0x66, 0x41, 0x0F, 0x7E, 0xC7)

//-----------------------------------------------

// movd r14d, xmm1

DEF_INSTR(45, Movd_r14d_xmm1, 0x66, 0x41, 0x0F, 0x7E, 0xCE)

//-----------------------------------------------

// movd r13d, xmm13

DEF_INSTR(46, Movd_r13d_xmm13, 0x66, 0x45, 0x0F, 0x7E, 0xED)

//-----------------------------------------------

// Push dword xmm13 

// sub rsp, 8
// movss dword [rsp],  xmm13

DEF_INSTR(47, Push_dword_xmm13, 0x48, 0x83, 0xEC, 0x08, \
                                0xF3, 0x44, 0x0F, 0x11, 0x2C, 0x24 )

//-----------------------------------------------

// movd xmm0, r15d

DEF_INSTR(48, Movd_xmm0_r15d, 0x66, 0x41, 0x0F, 0x6E, 0xC7)

//-----------------------------------------------

// movd xmm1, r14d

DEF_INSTR(49, Movd_xmm1_r14d, 0x66, 0x41, 0x0F, 0x6E, 0xCE)

//-----------------------------------------------

// movd xmm13, r13d

DEF_INSTR(50, Movd_xmm13_r13d, 0x66, 0x41, 0x0F, 0x6E, 0xED)

//-----------------------------------------------

// (short) jmp 0x00
// WARNING: this instruction must be patched!

DEF_INSTR(51, Short_jmp_N, 0xE8, 0x00)

//-----------------------------------------------

// (near) jmp 0x00000000 (relative to next instruction)
// WARNING: this instruction must be patched!

DEF_INSTR(52, Near_rel_jmp_N, 0xE9, 0x00, 0x00, 0x00, 0x00)

//------------------------------------------------

// (near) jmp [0x00000000] 
// WARNING: this instruction must be patched!

DEF_INSTR(53, Near_abs_jmp_ADDR, 0xFF, 0x24, 0x24, \
                             0x00, 0x00, 0x00, 0x00)

//-----------------------------------------------

// Convert xmm(i) float value to int value in r13d
// WARNING: needs to be patched

// cvtss2si r13d, xmm(i)

// PATCH INSTR: 

    // DEF_INSTR->array[1] = (i > 7)? 0x45: 0x44
    // DEF_INSTR->array[4] = 0xE8 + ( (i > 7)? (i - 8): i ) 

DEF_INSTR(54, Cvtss2si_r13d_xmmi, 0xF3, 0x00, 0x0F, 0x2D, 0x00)

//-----------------------------------------------

// Convert xmm(i) float value to int value in r14d
// WARNING: needs to be patched

// cvtss2si r14d, xmm(i)

// PATCH INSTR: 

    // DEF_INSTR->array[1] = (i > 7)? 0x45: 0x44
    // DEF_INSTR->array[4] = 0xF0 + ( (i > 7)? (i - 8): i ) 

DEF_INSTR(55, Cvtss2si_r14d_xmmi, 0xF3, 0x00, 0x0F, 0x2D, 0x00)


//-----------------------------------------------

// Push in stack qword from [0xAddress + 4 * r13d]
// WARNING: needs to be patched

// push qword [0xAddress + 4 * r13d]

DEF_INSTR(56, Push_qword_4_r13d_plus_ADDR, 0x67, 0x42, 0xFF, 0x34, 0xAD, \
                                           0x00, 0x00, 0x00, 0x00)

//-----------------------------------------------

// Push to stack xmm(i), i < 8 to stack

// sub rsp, 8
// movss dword [rsp], xmm(i)

// WARNING: needs to be patched

// PATCH_INSTR:

    // DEF_INSTR->array[7] = 0x04 + 0x08 * i

DEF_INSTR(57, Push_xmmi_l, 0x48, 0x83, 0xEC, 0x08, \
                           0xF3, 0x0F, 0x11, 0x00, 0x24)

//-----------------------------------------------

// Push to stack xmm(i), i >= 8 to stack

// sub rsp, 8
// movss dword [rsp], xmm(i)

// WARNING: needs to be patched

// PATCH_INSTR:

    // DEF_INSTR->array[8] = 0x04 + 0x08 * (i - 8)

DEF_INSTR(58, Push_xmmi_h, 0x48, 0x83, 0xEC, 0x08, \
                           0xF3, 0x44, 0x0F, 0x11, 0x00, 0x24)

//-----------------------------------------------

// Store zero integer value in r13d 

// mov r13d, 0

DEF_INSTR(59, Mov_r13d_0, 0x41, 0xBD, 0x00, 0x00, 0x00, 0x00)

//-----------------------------------------------

// Store zero integer value in r14d 

// mov r14d, 0

DEF_INSTR(60, Mov_r14d_0, 0x41, 0xBE, 0x00, 0x00, 0x00, 0x00)

//-----------------------------------------------

// Store zero integer value in r15d 

// mov r14d, 0

DEF_INSTR(61, Mov_r15d_0, 0x41, 0xBF, 0x00, 0x00, 0x00, 0x00)

//-----------------------------------------------

// Push qword from address
// push qword [0x00000000]

// needs to be patched

DEF_INSTR(62, Push_qword_ADDR, 0xFF, 0x34, 0x25, \
                               0x00, 0x00, 0x00, 0x00 )

//-----------------------------------------------

// push qword [4 * r13d + r14d + 0x00000000]

// needs to be patched

DEF_INSTR(63, Push_qword_4_r13d_plus_r14d_plus_ADDR, 0x67, 0x43, 0xFF, 0xB4, 0xAE, \
                                                     0x00, 0x00, 0x00, 0x00 )

//-----------------------------------------------

// pop r14

DEF_INSTR(64, Pop_r14, 0x41, 0x5E)

//-----------------------------------------------

// mov dword [ADDR + 4 * r13d], r14d

DEF_INSTR(65, Mov_dword_ADDR_plus_4_r13d_r14d, 0x67, 0x46, 0x89, 0x34, 0xAD, \
                                               0x00, 0x00, 0x00, 0x00 )

//-----------------------------------------------

// mov dword [ADDR + 4 * r13d + r15d], r14d

DEF_INSTR(66, Mov_dword_ADDR_plus_4_r13d_plus_r15d_r14d, 0x67, 0x47, 0x89, 0xB4, 0xAF, \
                                                         0x00, 0x00, 0x00, 0x00 )

//-----------------------------------------------

// Pop from stack to xmm(i), i < 8

// WARNING: needs to be patched

// PATCH INSTR:

    // DEF_INSTR->array[3] = 0x04 + 0x08 * i

DEF_INSTR(67, Pop_xmmi_l, 0xF3, 0x0F, 0x10, 0x00, 0x24, \
                          0x48, 0x83, 0xC4, 0x08 )

//-----------------------------------------------

// Pop from stack to xmm(i), i >= 8

// WARNING: needs to be patched

// PATCH INSTR:

    // DEF_INSTR->array[4] = 0x04 + 0x08 * (i - 8)

DEF_INSTR(68, Pop_xmmi_h, 0xF3, 0x44, 0x0F, 0x10, 0x00, 0x24, \
                          0x48, 0x83, 0xC4, 0x08 )

//-----------------------------------------------

// Rel call 

// WARNING: needs to be patched

DEF_INSTR(69, Rel_call, 0xE8, 0x00, 0x00, 0x00, 0x00 )

//------------------------------------------------

// movss xmm1, [0]

//WARNING: nneds to be patched

DEF_INSTR(70, Movss_xmm1_ADDR, 0xF3, 0x0F, 0x10, 0x0C, 0x25, \
                               0x00, 0x00, 0x00, 0x00)

//------------------------------------------------

// movss xmm13, [0]

//WARNING: needs to be patched

DEF_INSTR(71, Movss_xmm13_ADDR, 0xF3, 0x44, 0x0F, 0x10, 0x2C, 0x25, \
                                0x00, 0x00, 0x00, 0x00)

//-----------------------------------------------

// Conditional (near) jump 'je' N bytes ahead
// je $ + N

// WARNING: Instruction must be patched

DEF_INSTR(72, Je_near_ahead_N, 0x0F, 0x84, \
                               0x00, 0x00, 0x00, 0x00)

//-----------------------------------------------

// Conditional (near) jump 'jne' N bytes ahead
// je $ + N

// WARNING: Instruction must be patched

DEF_INSTR(73, Jne_near_ahead_N, 0x0F, 0x85, \
                                0x00, 0x00, 0x00, 0x00)

//-----------------------------------------------

// movss xmm0, dword [rsp - 16]

DEF_INSTR(74, Movss_xmm0_dword_rsp_minus_16, 0xF3, 0x0F, 0x10, 0x44, 0x24, 0xF0)

//-----------------------------------------------

// comiss xmm0, dword [rsp - 8] 

DEF_INSTR(75, Comiss_xmm0_dword_rsp_minus_8, 0x0F, 0x2F, 0x44, 0x24, 0xF8)

//-----------------------------------------------

// Conditional (short) jump 'je' N bytes ahead from this instruction
// je $ + N (short)

// WARNING: Instruction must be patched

DEF_INSTR(76, Je_short_ahead_N, 0x74, 0x00 )

//-----------------------------------------------

// Conditional (short) jump 'jne' N bytes ahead from this instruction
// jne $ + N (short)

// WARNING: Instruction must be patched

DEF_INSTR(77, Jne_short_ahead_N, 0x75, 0x00 )

//-----------------------------------------------

// Align stack to 16 boundary 

// mov r14, rsp; and r14, 0xF; add rsp, r14; 

DEF_INSTR(78, Align_stack_to_16, 0x49, 0x89, 0xE6, \
                                 0x49, 0x83, 0xE6, 0x0F, \
                                 0x4C, 0x01, 0xF4 )

//-----------------------------------------------

// Sub stack alignment

// sub rsp, r14

DEF_INSTR(79, Sub_stack_alignment, 0x4C, 0x29, 0xF4 )

//-----------------------------------------------


// Push xmm1 - xmm15

//sub rsp, 120
//movss dword [rsp + 0 ], xmm1
//movss dword [rsp + 8 ], xmm2
//movss dword [rsp + 16], xmm3
//movss dword [rsp + 24], xmm4
//movss dword [rsp + 32], xmm5
//movss dword [rsp + 40], xmm6
//movss dword [rsp + 48], xmm7
//movss dword [rsp + 56], xmm8
//movss dword [rsp + 64], xmm9
//movss dword [rsp + 72], xmm10
//movss dword [rsp + 80], xmm11
//movss dword [rsp + 88], xmm12
//movss dword [rsp + 96], xmm13
//movss dword [rsp + 104], xmm14
//movss dword [rsp + 112], xmm15

DEF_INSTR(80, Push_xmms_1_15, 0x48, 0x83, 0xEC, 0x78, \
                              0xF3, 0x0F, 0x11, 0x0C, 0x24, \
                              0xF3, 0x0F, 0x11, 0x54, 0x24, 0x08, \
                              0xF3, 0x0F, 0x11, 0x5C, 0x24, 0x10, \
                              0xF3, 0x0F, 0x11, 0x64, 0x24, 0x18, \
                              0xF3, 0x0F, 0x11, 0x6C, 0x24, 0x20, \
                              0xF3, 0x0F, 0x11, 0x74, 0x24, 0x28, \
                              0xF3, 0x0F, 0x11, 0x7C, 0x24, 0x30, \
                              0xF3, 0x44, 0x0F, 0x11, 0x44, 0x24, 0x38, \
                              0xF3, 0x44, 0x0F, 0x11, 0x4C, 0x24, 0x40, \
                              0xF3, 0x44, 0x0F, 0x11, 0x54, 0x24, 0x48, \
                              0xF3, 0x44, 0x0F, 0x11, 0x5C, 0x24, 0x50, \
                              0xF3, 0x44, 0x0F, 0x11, 0x64, 0x24, 0x58, \
                              0xF3, 0x44, 0x0F, 0x11, 0x6C, 0x24, 0x60, \
                              0xF3, 0x44, 0x0F, 0x11, 0x74, 0x24, 0x68, \
                              0xF3, 0x44, 0x0F, 0x11, 0x7C, 0x24, 0x70, )  

//-----------------------------------------------

// Pop xmm1 - xmm15

//movss xmm1,  dword [rsp + 0 ]
//movss xmm2,  dword [rsp + 8 ]
//movss xmm3,  dword [rsp + 16]
//movss xmm4,  dword [rsp + 24]
//movss xmm5,  dword [rsp + 32]
//movss xmm6,  dword [rsp + 40]
//movss xmm7,  dword [rsp + 48]
//movss xmm8,  dword [rsp + 56]
//movss xmm9,  dword [rsp + 64]
//movss xmm10, dword [rsp + 72]
//movss xmm11, dword [rsp + 80]
//movss xmm12, dword [rsp + 88]
//movss xmm13, dword [rsp + 96]
//movss xmm14, dword [rsp + 104]
//movss xmm15, dword [rsp + 112]
//add rsp, 120

DEF_INSTR(81, Pop_xmms_1_15, 0xF3, 0x0F, 0x10, 0x0C, 0x24, \
                             0xF3, 0x0F, 0x10, 0x54, 0x24, 0x08, \
                             0xF3, 0x0F, 0x10, 0x5C, 0x24, 0x10, \
                             0xF3, 0x0F, 0x10, 0x64, 0x24, 0x18, \
                             0xF3, 0x0F, 0x10, 0x6C, 0x24, 0x20, \
                             0xF3, 0x0F, 0x10, 0x74, 0x24, 0x28, \
                             0xF3, 0x0F, 0x10, 0x7C, 0x24, 0x30, \
                             0xF3, 0x44, 0x0F, 0x10, 0x44, 0x24, 0x38, \
                             0xF3, 0x44, 0x0F, 0x10, 0x4C, 0x24, 0x40, \
                             0xF3, 0x44, 0x0F, 0x10, 0x54, 0x24, 0x48, \
                             0xF3, 0x44, 0x0F, 0x10, 0x5C, 0x24, 0x50, \
                             0xF3, 0x44, 0x0F, 0x10, 0x64, 0x24, 0x58, \
                             0xF3, 0x44, 0x0F, 0x10, 0x6C, 0x24, 0x60, \
                             0xF3, 0x44, 0x0F, 0x10, 0x74, 0x24, 0x68, \
                             0xF3, 0x44, 0x0F, 0x10, 0x7C, 0x24, 0x70, \
                             0x48, 0x83, 0xC4, 0x78 )

//-----------------------------------------------


