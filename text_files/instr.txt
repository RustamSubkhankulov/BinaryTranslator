//DEF_INSTR(Name, Values_array)

//-----------------------------------------------

// two nops '0x90'

DEF_INSTR(Two_nops, 0x90, 0x90 )

//-----------------------------------------------

// push rax 

DEF_INSTR(Push_rax, 0x50 )

//-----------------------------------------------

// pop rax 

DEF_INSTR(Pop_rax, 0x58 )

//-----------------------------------------------

// push rbx, rbp, r12, r13, r14, r15

DEF_INSTR(Save_regs, 0x53, \
                     0x55, \
                     0x41, 0x54, \
                     0x41, 0x55, \
                     0x41, 0x56, \
                     0x41, 0x57 )

//-----------------------------------------------

// pop r15, r14, r13, r12, rbp, rbx

DEF_INSTR(Restore_regs, 0x41, 0x5F, \
                        0x41, 0x5E, \
                        0x41, 0x5D, \
                        0x41, 0x5C, \
                        0x5D, \
                        0x5B )

//-----------------------------------------------

// ret '0xC3' 

DEF_INSTR(Return, 0xC3 )

//-----------------------------------------------

// HLT 'analogue'

// xor rdi, rdi
// mov rax, 3Ch
// syscall

DEF_INSTR(Exit, 0x48, 0x31, 0xFF, \
                0xB8, 0x3C, 0x00, 0x00, 0x00, \
                0x0F, 0x05 )

//-----------------------------------------------

// Get first argument from stack to xmm15
// movss xmm15, dword [rsp + 8]

DEF_INSTR(Movss_xmm15_dword_rsp_plus_8, 0xF3, 0x44, 0x0F, 0x10, 0x7C, 0x24, 0x08 )

//-----------------------------------------------

// Get first argument from stack + 8 to xmm0
// movss xmm0, dword [rsp + 8]

DEF_INSTR(Movss_xmm0_dword_rsp_plus_8, 0xF3, 0x0F, 0x10, 0x44, 0x24, 0x08)

//-----------------------------------------------

// Get top value from stack in xmm0 for comapring 
// movss xmm0, dword [rsp]

DEF_INSTR(Movss_xmm0_dword_rsp, 0xF3, 0x0F, 0x10, 0x04, 0x24)

//-----------------------------------------------

// Get second argument from stack to xmm1
// movss xmm1, dword [rsp]

DEF_INSTR(Movss_xmm1_dword_rsp, 0xF3, 0x0F, 0x10, 0x0C, 0x24)

//-----------------------------------------------

// subss xmm0, dword[rsp]

DEF_INSTR(Subss_xmm0_dword_rsp, 0xF3, 0x0F, 0x5C, 0x04, 0x24)

//-----------------------------------------------

// Add with second arg from stack
// addss xmm15, dword [rsp]

DEF_INSTR(Addss_xmm15_dword_rsp, 0xF3, 0x44, 0x0F, 0x58, 0x3C, 0x24 )

//-----------------------------------------------

// Sub with second arg from stack
// subss xmm15, dword [rsp]

DEF_INSTR(Subss_xmm15_dword_rsp, 0xF3, 0x44, 0x0F, 0x5C, 0x3C, 0x24 )

//-----------------------------------------------

// Mul with second arg from stack
// mulss xmm15, dword [rsp]

DEF_INSTR(Mulss_xmm15_dword_rsp, 0xF3, 0x44, 0x0F, 0x59, 0x3C, 0x24 )

//-----------------------------------------------

// Div with second arg from stack
// divss xmm15, dword [rsp]

DEF_INSTR(Divss_xmm15_dword_rsp, 0xF3, 0x44, 0x0F, 0x5E, 0x3C, 0x24 )

//-----------------------------------------------

// Save xmm15 dword value in r15d
// movd r15d, xmm15

DEF_INSTR(Movd_r15d_xmm15, 0x66, 0x45, 0x0F, 0x7E, 0xFF)

//-----------------------------------------------

// Restore xmm15 dword value from r15d
// movd xmm15, r15d

DEF_INSTR(Movd_xmm15_r15d, 0x66, 0x45, 0x0F, 0x6E, 0xFF)

//-----------------------------------------------

// add rsp, 8

DEF_INSTR(Add_rsp_8, 0x48, 0x83, 0xC4, 0x08 )

//-----------------------------------------------

// add rsp, 16

DEF_INSTR(Add_rsp_16, 0x48, 0x83, 0xC4, 0x10 )

//-----------------------------------------------

// sub rsp, 8

DEF_INSTR(Sub_rsp_8, 0x48, 0x83, 0xEC, 0x08 )

//-----------------------------------------------

// sub rsp, 16

DEF_INSTR(Sub_rsp_16, 0x48, 0x83, 0xEC, 0x10 )

//-----------------------------------------------

// push dword xmm0 to stack

// sub rsp, 8
// movss dword[rsp], xmm0

DEF_INSTR(Push_dword_xmm0, 0x48, 0x83, 0xEC, 0x08, \
                           0xF3, 0x0F, 0x11, 0x04, 0x24 )

//-----------------------------------------------

// Mov dword xmm15 to [rsp]

// movss dword[rsp], xmm15

DEF_INSTR(Movss_dword_rsp_xmm15, 0xF3, 0x44, 0x0F, 0x11, 0x3C, 0x24 )

//-----------------------------------------------

// pop dword from stack to xmm0

// movss xmm0, dword [rsp]
// add rsp, 8

DEF_INSTR(Pop_dword_xmm0, 0xF3, 0x0F, 0x10, 0x04, 0x24, \
                          0x48, 0x83, 0xC4, 0x08 )

//-----------------------------------------------

// Mov to xmm1 from data memory address
// WARNING: this instruction must be parched with address

// movss xmm1, [0]

DEF_INSTR(Mov_xmm1_mem, 0xF3, 0x0F, 0x10, 0x0C, 0x25, \
                        0x00, 0x00, 0x00, 0x00)

//-----------------------------------------------

// Mov to xmm13 from data memory address
// WARNING: this instruction must be parched with address

// movss xmm13, [0]

DEF_INSTR(Mov_xmm13_mem, 0xF3, 0x44, 0x0F, 0x10, 0x2C, 0x25,
                         0x00, 0x00, 0x00, 0x00)

//-----------------------------------------------

// Compare xmm0, xmm1
// comiss xmm0, xmm1

DEF_INSTR(Comiss_xmm0_xmm1, 0x0F, 0x2F, 0xC1 )

//-----------------------------------------------

// Compare xmm0 with second arg dword [rsp + 8]
// comiss xmm0, dword [rsp + 8]

DEF_INSTR(Comiss_xmm0_dword_rsp_plus_8, 0x0F, 0x2F, 0x44, 0x24, 0x08)

//-----------------------------------------------

// Conditional (short) jump 'jbe' N bytes ahead from this instruction
// jbe $ + N (short)

// WARNING: Instruction must be patched

DEF_INSTR(Jbe_short_ahead_N, 0x76, 0x00 )

//-----------------------------------------------

// Conditional (near) jump 'jbe' N bytes ahead from this instruction
// jbe $ + N (short)

// WARNING: Instruction must be patched

DEF_INSTR(Jbe_near_ahead_N, 0x0F, 0x86, \
                            0x00, 0x00, 0x00, 0x00 )

//-----------------------------------------------

// Conditional (short) jump 'jb' N bytes ahead from this instruction
// jb $ + N

// WARNING: Instruction must be patched

DEF_INSTR(Jb_short_ahead_N, 0x72, 0x00 )

//-----------------------------------------------

// Conditional (near) jump 'jb' N bytes ahead from this instruction
// jb $ + N

// WARNING: Instruction must be patched

DEF_INSTR(Jb_near_ahead_N, 0x0F, 0x82, \
                           0x00, 0x00, 0x00, 0x00 )

//-----------------------------------------------

// Conditional (short) jump 'ja' N bytes ahead from this instruction
// ja $ + N

// WARNING: Instruction must be patched

DEF_INSTR(Ja_short_ahead_N, 0x77, 0x00 )

//-----------------------------------------------

// Conditional (near) jump 'ja' N bytes ahead from this instruction
// ja $ + N

// WARNING: Instruction must be patched

DEF_INSTR(Ja_near_ahead_N, 0x0F, 0x87, \
                           0x00, 0x00, 0x00, 0x00 )

//-----------------------------------------------

// Conditional (short) jump 'jae' N bytes ahead from this instruction
// jae $ + N

// WARNING: Instruction must be patched

DEF_INSTR(Jae_short_ahead_N, 0x73, 0x00 )

//-----------------------------------------------

// Conditional (near) jump 'jae' N bytes ahead from this instruction
// jae $ + N

// WARNING: Instruction must be patched

DEF_INSTR(Jae_short_ahead_N, 0x0F, 0x83, \
                             0x00, 0x00, 0x00, 0x00 )

//-----------------------------------------------

// Null xmm's

// pxor xmm(i), xmm(i) ; 0 <= i <=15 

DEF_INSTR(Null_xmms, 0x66, 0x0F, 0xEF, 0xC0, \
                     0x66, 0x0F, 0xEF, 0xC9, \
                     0x66, 0x0F, 0xEF, 0xD2, \
                     0x66, 0x0F, 0xEF, 0xDB, \
                     0x66, 0x0F, 0xEF, 0xE4, \
                     0x66, 0x0F, 0xEF, 0xED, \
                     0x66, 0x0F, 0xEF, 0xF6, \
                     0x66, 0x0F, 0xEF, 0xFF, \
                     0x66, 0x45, 0x0F, 0xEF, 0xC0, \
                     0x66, 0x45, 0x0F, 0xEF, 0xC9, \
                     0x66, 0x45, 0x0F, 0xEF, 0xD2, \
                     0x66, 0x45, 0x0F, 0xEF, 0xDB, \
                     0x66, 0x45, 0x0F, 0xEF, 0xE4, \
                     0x66, 0x45, 0x0F, 0xEF, 0xED, \
                     0x66, 0x45, 0x0F, 0xEF, 0xF6, \
                     0x66, 0x45, 0x0F, 0xEF, 0xFF  ) 

//-----------------------------------------------

// Null xmm13

// pxor xmm13, xmm13 

DEF_INSTR(Null_xmm13, 0x66, 0x45, 0x0F, 0xEF, 0xED )

//-----------------------------------------------

// Push xmm0 - xmm7

// sub rsp 64
//movss dword [rsp + 0 ], xmm0
//movss dword [rsp + 8 ], xmm1
//movss dword [rsp + 16], xmm2
//movss dword [rsp + 24], xmm3
//movss dword [rsp + 32], xmm4
//movss dword [rsp + 40], xmm5
//movss dword [rsp + 48], xmm6
//movss dword [rsp + 56], xmm7

DEF_INSTR(Push_parameter_xmms, 0x48, 0x83, 0xEC, 0x40, \
                               0xF3, 0x0F, 0x11, 0x04, 0x24, \
                               0xF3, 0x0F, 0x11, 0x4C, 0x24, 0x08, \
                               0xF3, 0x0F, 0x11, 0x54, 0x24, 0x10, \
                               0xF3, 0x0F, 0x11, 0x5C, 0x24, 0x18, \
                               0xF3, 0x0F, 0x11, 0x64, 0x24, 0x20, \
                               0xF3, 0x0F, 0x11, 0x6C, 0x24, 0x28, \
                               0xF3, 0x0F, 0x11, 0x74, 0x24, 0x30, \
                               0xF3, 0x0F, 0x11, 0x7C, 0x24, 0x38  )  

//-----------------------------------------------

// Pop xmm1 - xmm7

//movss xmm1, dword [rsp + 0 ]
//movss xmm2, dword [rsp + 8 ]
//movss xmm3, dword [rsp + 16]
//movss xmm4, dword [rsp + 24]
//movss xmm5, dword [rsp + 32]
//movss xmm6, dword [rsp + 40]
//movss xmm7, dword [rsp + 48]

//add rsp, 56

DEF_INSTR(Pop_xmms_1_7, 0xF3, 0x0F, 0x10, 0x0C, 0x24, \
                        0xF3, 0x0F, 0x10, 0x54, 0x24, 0x08, \
                        0xF3, 0x0F, 0x10, 0x5C, 0x24, 0x10, \
                        0xF3, 0x0F, 0x10, 0x64, 0x24, 0x18, \
                        0xF3, 0x0F, 0x10, 0x6C, 0x24, 0x20, \
                        0xF3, 0x0F, 0x10, 0x74, 0x24, 0x28, \
                        0xF3, 0x0F, 0x10, 0x7C, 0x24, 0x30, \
                        0x48, 0x83, 0xC4, 0x38 )

//-----------------------------------------------

// Push xmm1 - xmm7

// sub rsp, 56
//movss dword [rsp + 0 ], xmm1
//movss dword [rsp + 8 ], xmm2
//movss dword [rsp + 16], xmm3
//movss dword [rsp + 24], xmm4
//movss dword [rsp + 32], xmm5
//movss dword [rsp + 40], xmm6
//movss dword [rsp + 48], xmm7

DEF_INSTR(Push_xmms_1_7, 0x48, 0x83, 0xEC, 0x38, \
                         0xF3, 0x0F, 0x11, 0x0C, 0x24, \
                         0xF3, 0x0F, 0x11, 0x54, 0x24, 0x10, \
                         0xF3, 0x0F, 0x11, 0x5C, 0x24, 0x18, \
                         0xF3, 0x0F, 0x11, 0x64, 0x24, 0x20, \
                         0xF3, 0x0F, 0x11, 0x6C, 0x24, 0x28, \
                         0xF3, 0x0F, 0x11, 0x74, 0x24, 0x30, \
                         0xF3, 0x0F, 0x11, 0x7C, 0x24, 0x38  )  
                                  
//-----------------------------------------------

// Pop xmm0 - xmm7

//movss xmm0, dword [rsp + 0 ]
//movss xmm1, dword [rsp + 8 ]
//movss xmm2, dword [rsp + 16]
//movss xmm3, dword [rsp + 24]
//movss xmm4, dword [rsp + 32]
//movss xmm5, dword [rsp + 40]
//movss xmm6, dword [rsp + 48]
//movss xmm7, dword [rsp + 54]

//add rsp, 64

DEF_INSTR(Pop_parameter_xmms, 0xF3, 0x0F, 0x10, 0x04, 0x24, \
                              0xF3, 0x0F, 0x10, 0x4C, 0x24, 0x08, \
                              0xF3, 0x0F, 0x10, 0x54, 0x24, 0x10, \
                              0xF3, 0x0F, 0x10, 0x5C, 0x24, 0x18, \
                              0xF3, 0x0F, 0x10, 0x64, 0x24, 0x20, \
                              0xF3, 0x0F, 0x10, 0x6C, 0x24, 0x28, \
                              0xF3, 0x0F, 0x10, 0x74, 0x24, 0x30, \
                              0xF3, 0x0F, 0x10, 0x7C, 0x24, 0x38,
                              0x48, 0x83, 0xC4, 0x40 )

//-----------------------------------------------

// movd r15d, xmm0

DEF_INSTR(Movd_r15d_xmm0, 0x66, 0x41, 0x0F, 0x7E, 0xC7)

//-----------------------------------------------

// movd r14d, xmm1

DEF_INSTR(Movd_r14d_xmm1, 0x66, 0x41, 0x0F, 0x7E, 0xCE)

//-----------------------------------------------

// movd r13d, xmm13

DEF_INSTR(Movd_r13d_xmm13, 0x66, 0x45, 0x0F, 0x7E, 0xED)

//-----------------------------------------------

// Push dword xmm13 

// sub rsp, 8
// movss dword [rsp],  xmm13

DEF_INSTR(Push_dword_xmm13, 0x48, 0x83, 0xEC, 0x08, \
                            0xF3, 0x44, 0x0F, 0x11, 0x2C, 0x24 )

//-----------------------------------------------

// movd xmm0, r15d

DEF_INSTR(Movd_xmm0_r15d, 0x66, 0x41, 0x0F, 0x6E, 0xC7)

//-----------------------------------------------

// movd xmm1, r14d

DEF_INSTR(Movd_xmm1_r14d, 0x66, 0x41, 0x0F, 0x6E, 0xCE)

//-----------------------------------------------

// movd xmm13, r13d

DEF_INSTR(Movd_xmm13_r13d, 0x66, 0x41, 0x0F, 0x6E, 0xED)

//-----------------------------------------------

// (short) jmp 0x00
// WARNING: this instruction must be patched!

DEF_INSTR(Short_jmp_N, 0xE8, 0x00)

//-----------------------------------------------

// (near) jmp 0x00000000 (relative to next instruction)
// WARNING: this instruction must be patched!

DEF_INSTR(Near_rel_jmp_N, 0xE9, 0x00, 0x00, 0x00, 0x00)

//------------------------------------------------

// (near) jmp [0x00000000] 
// WARNING: this instruction must be patched!

DEF_INSTR(Near_abs_jmp_ADDR, 0xFF, 0x24, 0x24, \
                             0x00, 0x00, 0x00, 0x00)

//-----------------------------------------------

// Convert xmm(i) float value to int value in r13d
// WARNING: needs to be patched

// cvtss2si r13d, xmm(i)

// PATCH INSTR: 

    // DEF_INSTR->array[1] = (i > 7)? 0x45: 0x44
    // DEF_INSTR->array[4] = 0xE8 + ( (i > 7)? (i - 8): i ) 

DEF_INSTR(Cvtss2si_r13d_xmmi, 0xF3, 0x00, 0x0F, 0x2D, 0x00)

//-----------------------------------------------

// Convert xmm(i) float value to int value in r14d
// WARNING: needs to be patched

// cvtss2si r14d, xmm(i)

// PATCH INSTR: 

    // DEF_INSTR->array[1] = (i > 7)? 0x45: 0x44
    // DEF_INSTR->array[4] = 0xF0 + ( (i > 7)? (i - 8): i ) 

DEF_INSTR(Cvtss2si_r14d_xmmi, 0xF3, 0x00, 0x0F, 0x2D, 0x00)


//-----------------------------------------------

// Push in stack qword from [0xAddress + r13d]
// WARNING: needs to be patched

// push qword [0xAddress + r13d]

DEF_INSTR(Push_qword_r13d_plus_ADDR, 0x67, 0x41, 0xFF, 0xB5, \
                                     0x00, 0x00, 0x00, 0x00)

//-----------------------------------------------

// Push to stack xmm(i), i < 8 to stack

// sub rsp, 8
// movss dword [rsp], xmm(i)

// WARNING: needs to be patched

// PATCH_INSTR:

    // DEF_INSTR->array[7] = 0x04 + 0x08 * i

DEF_INSTR(Push_xmmi_l, 0x48, 0x83, 0xEC, 0x08, \
                       0xF3, 0x0F, 0x11, 0x00, 0x24)

//-----------------------------------------------

// Push to stack xmm(i), i >= 8 to stack

// sub rsp, 8
// movss dword [rsp], xmm(i)

// WARNING: needs to be patched

// PATCH_INSTR:

    // DEF_INSTR->array[8] = 0x04 + 0x08 * (i - 8)

DEF_INSTR(Push_xmmi_h, 0x48, 0x83, 0xEC, 0x08, \
                       0xF3, 0x44, 0x0F, 0x11, 0x00, 0x24)

//-----------------------------------------------

// Store zero integer value in r13d 

// mov r13d, 0

DEF_INSTR(Mov_r13d_0, 0x41, 0xBD, 0x00, 0x00, 0x00, 0x00)

//-----------------------------------------------

// Store zero integer value in r14d 

// mov r14d, 0

DEF_INSTR(Mov_r14d_0, 0x41, 0xBE, 0x00, 0x00, 0x00, 0x00)

//-----------------------------------------------

// Store zero integer value in r15d 

// mov r14d, 0

DEF_INSTR(Mov_r15d_0, 0x41, 0xBF, 0x00, 0x00, 0x00, 0x00)

//-----------------------------------------------

// Push qword from address
// push qword [0x00000000]

// needs to be patched

DEF_INSTR(Push_qword_ADDR, 0xFF, 0x34, 0x25, \
                           0x00, 0x00, 0x00, 0x00 )

//-----------------------------------------------

// push qword [r13d + r14d + 0x00000000]

// needs to be patched

DEF_INSTR(Push_qword_r13d_plus_r14d_plus_ADDR, 0x67, 0x43, 0xFF, 0xB4, 0x35, \
                                               0x00, 0x00, 0x00, 0x00 )

//-----------------------------------------------

// pop r14

DEF_INSTR(Pop_r14, 0x41, 0x5E)

//-----------------------------------------------

// mov dword [ADDR + r13d], r14d

DEF_INSTR(Mov_dword_ADDR_plus_r13d_r14d, 0x67, 0x45, 0x89, 0xB5, \
                                         0x00, 0x00, 0x00, 0x00 )

//-----------------------------------------------

// mov dword [ADDR + r13d + r15d], r14d

DEF_INSTR(Mov_dword_ADDR_plus_r13d_plus_r15d_r14d, 0x67, 0x47, 0x89, 0xB4, 0x3D, \
                                                   0x00, 0x00, 0x00, 0x00 )

//-----------------------------------------------

// Pop from stack to xmm(i), i < 8

// WARNING: needs to be patched

// PATCH INSTR:

    // DEF_INSTR->array[3] = 0x04 + 0x08 * i

DEF_INSTR(Pop_xmmi_l, 0xF3, 0x0F, 0x10, 0x00, 0x24, \
                      0x48, 0x83, 0xC4, 0x08 )

//-----------------------------------------------

// Pop from stack to xmm(i), i >= 8

// WARNING: needs to be patched

// PATCH INSTR:

    // DEF_INSTR->array[4] = 0x04 + 0x08 * (i - 8)

DEF_INSTR(Pop_xmmi_h, 0xF3, 0x44, 0x0F, 0x10, 0x00, 0x24, \
                      0x48, 0x83, 0xC4, 0x08 )

//-----------------------------------------------

// Rel call 

// WARNING: needs to be patched

DEF_INSTR(Rel_call, 0xE8, 0x00, 0x00, 0x00, 0x00 )

//------------------------------------------------

// movss xmm1, [0]

//WARNING: nneds to be patched

DEF_INSTR(Movss_xmm1_ADDR, 0xF3, 0x0F, 0x10, 0x0C, 0x25, \
                           0x00, 0x00, 0x00, 0x00)

//------------------------------------------------

// movss xmm13, [0]

//WARNING: needs to be patched

DEF_INSTR(Movss_xmm13_ADDR, 0xF3, 0x44, 0x0F, 0x10, 0x2C, 0x25, \
                            0x00, 0x00, 0x00, 0x00)
